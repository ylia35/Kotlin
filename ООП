//Жёсткие диски. Определяются названием и ёмкостью. Внешние — наличием си
//стемы защиты от падения; внутренние — размером (2.5"или 3.5"). Выведите диски
//ёмкостью более 200 ГБ.
package oop

// Класс для всех устройств хранения данных
interface StorageDevice {
    val name: String
    val capacity: Int
}

// Класс диск
abstract class HardDrive(
    override val name: String,
    override val capacity: Int
) : StorageDevice {
    abstract fun getInfo(): String
}

// Внутренний жёсткий диск
class InternalHardDrive(
    name: String,
    capacity: Int,
    private val sizeInches: Double
) : HardDrive(name, capacity) {
    override fun getInfo(): String {
        return "Внутренний диск: $name, ёмкость: ${capacity}ГБ, размер: $sizeInches\""
    }
}

// Внешний жёсткий диск
class ExternalHardDrive(
    name: String,
    capacity: Int,
    private val hasDropProtection: Boolean
) : HardDrive(name, capacity) {
    override fun getInfo(): String {
        val protection = if (hasDropProtection) "есть защита от падения" else "нет защиты"
        return "Внешний диск: $name, ёмкость: ${capacity}ГБ, $protection"
    }
}

// Класс для управления списком дисков
class HardDriveManager {
    private val drives = mutableListOf<HardDrive>()

    fun addDrive(drive: HardDrive) {
        drives.add(drive)
    }

    fun getDrivesOverCapacity(minCapacity: Int): List<HardDrive> {
        return drives.filter { it.capacity > minCapacity }
    }
}

// Проверки
class InputValidator {

    fun readPositiveInt(prompt: String): Int? {
        println(prompt)
        val input = readlnOrNull()
        val number = input?.toIntOrNull()
        if (number == null || number <= 0) {
            println("Ошибка: нужно ввести положительное число.")
            return null
        }
        return number
    }

    fun readNonEmptyString(prompt: String): String? {
        println(prompt)
        val input = readlnOrNull()?.trim()
        if (input.isNullOrEmpty()) {
            println("Ошибка: строка не может быть пустой.")
            return null
        }
        return input
    }

    fun readDriveType(): String? {
        println("Введите тип диска (внутренний / внешний):")
        val input = readlnOrNull()?.trim()?.lowercase()
        if (input != "внутренний" && input != "внешний") {
            println("Ошибка: тип должен быть 'внутренний' или 'внешний'.")
            return null
        }
        return input
    }

    fun readDriveSize(): Double? {
        println("Введите размер (2.5 или 3.5):")
        val input = readlnOrNull()?.trim()
        val size = input?.toDoubleOrNull()
        if (size == null || (size != 2.5 && size != 3.5)) {
            println("Ошибка: размер должен быть именно 2.5 или 3.5.")
            return null
        }
        return size
    }

    fun readDropProtection(): Boolean? {
        println("Есть ли защита от падения? (да/нет):")
        val input = readlnOrNull()?.trim()?.lowercase()
        return when (input) {
            "да" -> true
            "нет" -> false
            else -> {
                println("Ошибка: нужно ввести 'да' или 'нет'.")
                null
            }
        }
    }
}

// Главная функция
fun main() {
    val manager = HardDriveManager()
    val validator = InputValidator()

    val count = validator.readPositiveInt("Сколько дисков вы хотите ввести?") ?: return

    var index = 0
    while (index < count) {
        println("\nВвод данных для диска №${index + 1}")

        val type = validator.readDriveType()
        if (type == null) {
            index++
            continue
        }

        val name = validator.readNonEmptyString("Введите название диска:")
        if (name == null) {
            index++
            continue
        }

        val capacity = validator.readPositiveInt("Введите ёмкость (в ГБ):")
        if (capacity == null) {
            index++
            continue
        }

        if (type == "внутренний") {
            val size = validator.readDriveSize()
            if (size == null) {
                index++
                continue
            }
            manager.addDrive(InternalHardDrive(name, capacity, size))
        } else {
            val hasProtection = validator.readDropProtection()
            if (hasProtection == null) {
                index++
                continue
            }
            manager.addDrive(ExternalHardDrive(name, capacity, hasProtection))
        }

        index++
    }

    println("\nВсе диски:")

    println("\nДиски с ёмкостью более 200 ГБ:")
    val largeDrives = manager.getDrivesOverCapacity(200)
    largeDrives.forEach { println(it.getInfo()) }
}
// readDropProtection это не должно получать ничего на ввод
