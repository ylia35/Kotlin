//Жёсткие диски. Определяются названием и ёмкостью. Внешние — наличием си
//стемы защиты от падения; внутренние — размером (2.5"или 3.5"). Выведите диски
//ёмкостью более 200 ГБ.

// Интерфейс для всех устройств хранения данных
interface StorageDevice {
    val name: String
    val capacity: Int // в ГБ
}

// Базовый абстрактный класс
abstract class HardDrive(
    override val name: String,
    override val capacity: Int
) : StorageDevice {
    abstract fun getInfo(): String
}

// Внутренний жёсткий диск
class InternalHardDrive(
    name: String,
    capacity: Int,
    private val sizeInches: Double
) : HardDrive(name, capacity) {
    override fun getInfo(): String {
        return "Внутренний диск: $name, ёмкость: ${capacity}ГБ, размер: ${sizeInches}\""
    }
}

// Внешний жёсткий диск
class ExternalHardDrive(
    name: String,
    capacity: Int,
    private val hasDropProtection: Boolean
) : HardDrive(name, capacity) {
    override fun getInfo(): String {
        val protection = if (hasDropProtection) "есть защита от падения" else "нет защиты"
        return "Внешний диск: $name, ёмкость: ${capacity}ГБ, $protection"
    }
}

// Класс для управления списком дисков
class HardDriveManager {
    private val drives = mutableListOf<HardDrive>()

    fun addDrive(drive: HardDrive) {
        drives.add(drive)
    }

    fun getDrivesOverCapacity(minCapacity: Int): List<HardDrive> {
        return drives.filter { it.capacity > minCapacity }
    }

    fun showAll() {
        drives.forEach { println(it.getInfo()) }
    }
}

// Точка входа
fun main() {
    val manager = HardDriveManager()

    println("Сколько дисков вы хотите ввести?")
    val countInput = readlnOrNull()
    val count = countInput?.toIntOrNull() ?: run {
        println("Некорректное количество, программа завершена.")
        return
    }

    repeat(count) {
        println("\nВведите тип диска (внутренний / внешний):")
        val type = readlnOrNull()?.trim()?.lowercase() ?: return

        println("Введите название диска:")
        val name = readlnOrNull()?.trim() ?: return

        println("Введите ёмкость (в ГБ):")
        val capacity = readlnOrNull()?.toIntOrNull() ?: return

        when (type) {
            "внутренний" -> {
                println("Введите размер (2.5 или 3.5):")
                val size = readlnOrNull()?.toDoubleOrNull() ?: return
                manager.addDrive(InternalHardDrive(name, capacity, size))
            }
            "внешний" -> {
                println("Есть ли защита от падения? (да/нет):")
                val hasProtection = readlnOrNull()?.trim()?.lowercase() == "да"
                manager.addDrive(ExternalHardDrive(name, capacity, hasProtection))
            }
            else -> println("Неизвестный тип диска, пропущен.")
        }
    }

    println("\nВсе диски:")
    manager.showAll()

    println("\nДиски с ёмкостью более 200 ГБ:")
    val largeDrives = manager.getDrivesOverCapacity(200)
    largeDrives.forEach { println(it.getInfo()) }
}
