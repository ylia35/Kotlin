package oop

interface StorageDevice {
    val name: String
    val capacity: Int
}

abstract class HardDrive(
    override val name: String,
    override val capacity: Int
) : StorageDevice

class InternalHardDrive(
    name: String,
    capacity: Int,
    val sizeInches: Double
) : HardDrive(name, capacity)

class ExternalHardDrive(
    name: String,
    capacity: Int,
    val hasDropProtection: Boolean
) : HardDrive(name, capacity)


interface StorageFormatter {
    fun format(device: StorageDevice): String
}

class DriveInfoFormatter : StorageFormatter {
    override fun format(device: StorageDevice): String = when (device) {
        is InternalHardDrive -> "Внутренний диск: ${device.name}, ёмкость: ${device.capacity} ГБ, размер: ${device.sizeInches}\""
        is ExternalHardDrive -> {
            val protection = if (device.hasDropProtection) "есть защита от падения" else "нет защиты"
            "Внешний диск: ${device.name}, ёмкость: ${device.capacity} ГБ, $protection"
        }
        else -> "Неизвестное устройство: ${device.name}"
    }
}

interface DeviceManager<T : StorageDevice> {
    fun add(device: T)
    fun filter(predicate: (T) -> Boolean): List<T>
    fun getAll(): List<T>
}

class HardDriveManager : DeviceManager<HardDrive> {
    private val drives = mutableListOf<HardDrive>()

    override fun add(device: HardDrive) {
        drives.add(device)
    }

    override fun filter(predicate: (HardDrive) -> Boolean): List<HardDrive> {
        return drives.filter(predicate)
    }

    override fun getAll(): List<HardDrive> = drives.toList()
}

interface InputProvider {
    fun readLine(prompt: String): String?
}

class ConsoleInputProvider : InputProvider {
    override fun readLine(prompt: String): String? {
        println(prompt)
        return readlnOrNull()?.trim()
    }
}

class ErrorPrinter {
    fun print(message: String) {
        println("Ошибка: $message")
    }
}

class IntValidator {
    fun validate(value: String?): Int? {
        val number = value?.toIntOrNull()
        return if (number != null && number > 0) number else null
    }
}

class StringValidator {
    fun validate(value: String?): String? =
        if (!value.isNullOrBlank()) value else null
}

class DriveTypeValidator {
    fun validate(value: String?): String? {
        val type = value?.lowercase()
        return if (type == "внутренний" || type == "внешний") type else null
    }
}

class DriveSizeValidator {
    fun validate(value: String?): Double? {
        val size = value?.toDoubleOrNull()
        return if (size == 2.5 || size == 3.5) size else null
    }
}

class DropProtectionParser {
    fun parse(value: String?): Boolean? = when (value?.lowercase()) {
        "да" -> true
        "нет" -> false
        else -> null
    }
}

class HardDriveApp(
    private val manager: HardDriveManager,
    private val formatter: StorageFormatter,
    private val input: InputProvider,
    private val intValidator: IntValidator,
    private val stringValidator: StringValidator,
    private val typeValidator: DriveTypeValidator,
    private val sizeValidator: DriveSizeValidator,
    private val protectionParser: DropProtectionParser,
    private val errorPrinter: ErrorPrinter
) {
    fun run() {
        val count = intValidator.validate(input.readLine("Сколько дисков вы хотите ввести?")) ?: run {
            errorPrinter.print("нужно ввести положительное число.")
            return
        }

        repeat(count) { index ->
            println("\nВвод данных для диска №${index + 1}")

            val type = typeValidator.validate(input.readLine("Введите тип диска (внутренний / внешний):")) ?: run {
                errorPrinter.print("тип должен быть 'внутренний' или 'внешний'.")
                return@repeat
            }

            val name = stringValidator.validate(input.readLine("Введите название диска:")) ?: run {
                errorPrinter.print("строка не может быть пустой.")
                return@repeat
            }

            val capacity = intValidator.validate(input.readLine("Введите ёмкость (в ГБ):")) ?: run {
                errorPrinter.print("нужно ввести положительное число.")
                return@repeat
            }

            val drive = when (type) {
                "внутренний" -> {
                    val size = sizeValidator.validate(input.readLine("Введите размер (2.5 или 3.5):")) ?: run {
                        errorPrinter.print("размер должен быть 2.5 или 3.5.")
                        return@repeat
                    }
                    InternalHardDrive(name, capacity, size)
                }
                "внешний" -> {
                    val hasProtection = protectionParser.parse(input.readLine("Есть ли защита от падения? (да/нет):")) ?: run {
                        errorPrinter.print("ответ должен быть 'да' или 'нет'.")
                        return@repeat
                    }
                    ExternalHardDrive(name, capacity, hasProtection)
                }
                else -> return@repeat
            }

            manager.add(drive)
        }

        val minCapacity = intValidator.validate(
            input.readLine("\nВведите минимальную ёмкость (в ГБ), чтобы отфильтровать диски:")
        ) ?: run {
            errorPrinter.print("нужно ввести положительное число.")
            return
        }

        val filtered = manager.filter { it.capacity > minCapacity }

        println("\nДиски с ёмкостью более $minCapacity ГБ:")
        if (filtered.isEmpty()) println("Нет дисков, соответствующих условию.")
        else filtered.forEach { println(formatter.format(it)) }

        println("\nРабота программы завершена.")
    }
}

fun main() {
    HardDriveApp(
        manager = HardDriveManager(),
        formatter = DriveInfoFormatter(),
        input = ConsoleInputProvider(),
        intValidator = IntValidator(),
        stringValidator = StringValidator(),
        typeValidator = DriveTypeValidator(),
        sizeValidator = DriveSizeValidator(),
        protectionParser = DropProtectionParser(),
        errorPrinter = ErrorPrinter()
    ).run()
}
